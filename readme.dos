DOS INSTALLATION:
================
A) To install the executables:
  1) Copy the two programs (HPGL2PS.EXE and DXY2PS.EXE) to a directory
     in your PATH, so that they can be executed, no matter where you are
     in the directory tree.  For instance, if you have a directory called
     C:\BIN where you keep utility programs like this, and C:\BIN is on
     your path, and, supposing that this release of the converter programs
     is on a disk in your A: drive, then just type:

       COPY A:\DOSSTUFF\HPGL2PS.EXE C:\BIN
       COPY A:\DOSSTUFF\DXY2PS.EXE C:\BIN

  2) To Print out Documentation:
     If you have a postscript printer, just send your PostScript-formatted
     hpgl2ps or dxy2ps doc files to the printer.  For example:

       COPY A:\DOSSTUFF\HPGL2PS.PS PRN

     Or if you have another kind of printer which just accepts plain
     text: 

       COPY A:\DOSSTUFF\HPGL2PS.TXT PRN

B) If you want to actually recompile the program (in order to modify it):
  1) If you are using djgpp compiler, then
     a) Use the Unix (GNU) makefile:

         cp makefile.unx makefile

     b) Follow the directions in the makefile for djgpp.
     c) Type 'make'.  This should run without warnings or errors, even if
        you've compiled with -Wall.  Upon successful completion of the
        executables, make will construct four test files (with suffix of
        .ps) automatically.  Compare these to their *.ps1 counterparts I
        provide (via 'ls'/'dir' or 'cmp'/'fc' or actual printout): Check
        that your *.ps files are reasonably close the the *.ps1  files. They
        should be only slightly different, owing to decimal point rounding
        variation.  If you use MS-DOS, your file sizes will be even more
        different, owing I believe to the carriage returns in the postscript
        output.  But they should still be in roughly the same ballpark.

  2) If you are using Borland C/C++ 4.5, then
     a) Use the borland makefile:

         copy makefile.bor makefile

     b) Follow the directions in the makefile for borland.

  3) I've also included some pre-formatted manual pages in
     text/backspace form (*.txt) and postscript (*.ps) for you, since
     most dos users won't have t/n/groff to format the *.1 manual
     pages. These are in the dosstuff subdirectory of this archive.  

TO RUN (UNIX and DOS):
=====================
   You can try out your converter programs by running them on the sample
   test HPGL and DXY files.  For instance, test1h.hpg is an hpgl
   file.  Convert it to Postscript and save it in a file called
   test1.ps by running the program this way: 

     hpgl2ps test1h.hpg > test1h.ps

   You can compare your test1h.ps with the postscript version I made,
   'test1h.ps1'.

   Now, if you have a Postscript printer, you can print out your
   file by typing (in UNIX):


     lpr test1h.ps

   or, in DOS:

     copy test1h.ps prn

   Alternatively, if you want to save a step from the above two
   commands, you can omit the step to make a file, and just pipe the
   converter's output right into the printer, instead. In UNIX, you
   would type:

     hpgl2ps test1h.hpg | lpr

   and in DOS:

     hpgl2ps test1h.hpg > prn

NOTES:
=====
/*  hpgl2ps.pckd  - enhanced version */
/*  hpgl2ps.ucb   - Further enhanced version */
/*  hpgl2ps.mlb   - Enhanced even further */
/*  hpgl2ps v2.1  - Cleaned up for warnings, bugs, ported to DOS. */

There are two filters in this package which are based on the Roland
plotter command set.

1. DXY: A simple command set which is used with all DXY plotters

2. RD-GL: This command set is a superset of the HP (Hewlet Packard)
   graphics language.

Not all the commands of DXY or RD-GL (HPGL) are implemented (approx 95%
are) and those commands that are not are skipped and a warning given.
It is very easy to add to this filter if a particular unimplemented
command is desired.

If you wish to implement a command go to the relevant portion in the
command switch "dxycom.c" or "hpglcom.c" and call an appropriate user
written procedure.  (You will need a good knowledge of writing
PostScript programs)

The filters use the the procedure "getopt" which is used to interpret
command line options and arguments and is normally available on 4.3 bsd
and Sys V Unix. For those sites running 4.1 or 4.2 it may be available
as a local library and must be written into the Makefile.

IF YOU DONT HAVE GETOPT YOU WILL HAVE REWRITE THE CODE THAT INTERPRETS
COMMAND LINE OPTIONS AND ARGUMENTS.

NOTE 1: The method of writing text is not fully compatible with HPGL
and will be changed at a later date.

NOTE 2: The PostScript macros are written into a C procedure to allow
each filter to be a single stand alone program. These macros can easily
be incorporated into other filter programs.

I have written some test procedures for the testing of each filter they
are "test1.hpgl" for hpgl2ps and "test1.dxy" for dxy2ps.

Don McCormick.

-------------------------
Notes on first enhancement:

Support for user defined characters added by 
Gerald William Kokodyniak B.A.Sc. M.A.Sc.
University of Toronto, Department of Mechanical Engineering

-------------------------
Notes on second enhancement:
Support for Scaling, tickmarks, and better user defined characters
added by Gordon Jacobs, (Ph.D., since we're into titles above)
University of California, Berkeley in July 1989.

Mods were made ONLY for the hpgl2ps program and are not guaranteed
to work for dxy2ps.  HP-GL code from the Tektronix DSA 602
Digitizing Signal Analyzer (scope) were used as a test.
Laserwriter output was compared directly with plots from a
HP7550A plotter reading the same HP-GL file.

Support for scaling was added.
The Scaling involves re-setting the coordinate
system by re-calculating the XSCALE and YSCALE numbers and adding
an offset to the origin.  The offset had to be added to all files
that make use of the scaling parameters.

Tick marks were added with tick.c.  Uses relative draw commands
to make the tick marks and adds two global variables which are
the tick length as a percentage of the overall dimensions.

The parser was changed.  The SIGNED_NUMERIC macro recognized a comma
as a valid character which does not make sense.  The HP-GL code from
the DSA 602 often contains a mnemonic followed by a comma, but with
no parameters.  This is valid code although most sources will not
place a comma unless optional parameters actually follow.  The comma
was removed as a valid SIGNED_NUMERIC character and the function
getval() was modified to read all trailing commas and spaces.  In this way
the parser works for both the standard and odd case mentioned above.

The user defined character routine was modified heavily.  Original
function did not take into account the angle of characters.  The
new function reads the current angle of characters and orients
the user defined character in the same way.  The scaling, which was
originally huge for some reason now is dynamically set to a 
proportion of the size of regular text character.  The linewidth
of the user defined character is arbitrarily set to 0.25mm and
then the restored to the previous value.  This width seems to fit
the "linewidth" of the characters in the postscript helvetica
font sized for the DSA 602 output.

The default paper size is changed to be 8.5 x 11 inch paper with
command line options added to support all others.

The command line options -w and -h were added because the relative
scaling of fonts with the "SR" HP-GL command, while implemented
correctly, gives much smaller character sizes than the HP7550A plotter.
The defaults were set empirically to match plotter output.

The sizes in viewport.c were modified to get correct positioning
on the 8.5 x 11 paper when compared to a plot directly from the
HP7550A on the same type of paper.

The textps() routine was modified to move the position pointers to
the end of a string when a string is drawn.  This was commented out
in the code that I received, but needed to be restored for the
user defined character to be in the correct place.  The results
match the HP plotter for the same code.

----------------------
Notes on third enhancement:
All changes pertain to HPGL stuff only.

The removale of the comma in the SIGNED_NUMBER function was incorrect.
The problem was that some programs put out a comma after the PD command
and before the set of numbers.  This problem was fixed when the parser
was enhanced.  For some reason the change mentioned above in the previous
enhancement didn't work when the comma was followed by valid numbers.

The hpglcom.c parser was changed so that:
     1. All of the known HPGL commands (1984 HP 7580 plotter manual) have
	been added to the parser list, making it easier for someone to
	implement a command.
     2. All unknown commands had the data following that command, up until
	the next command, dumped.  This cleaned up the parser problem that
	I was seeing.
     3. Three new compilable options have been added:
	DEBUG:	When turned on, all PostScript output (after the macros)
		is put out on stderr, along with the HPGL commands.  This
		allows the programmer to see the input HPGL commands and
		the PostScript output.  The new AA command also puts out
		many of its computations.
	NOTIMP: Output all HGPL commands that are unknown.  If you don't
		want this list, turn off this compiler option.
	SYSV:	Many AT&T System V Unix systems don't have rint().  This
		option will use the very simple one that I included.
     4. The HPGL Absolute Arc (AA) command has been implemented.  The Arc
	Relative (AR) one has not (yet).  See the new routine arcps.c for
	further comments on what was done.

The default line sizes have been changed.  See the man page for the complete
list.

Notes on fourth enhancement (hpgl2ps v2.1):
==============================================================================
Basically, I did very little to this version, except some fine tuning to:

1) make printouts of unsupported calls with NOTIMP print out on
   separate lines, for clearer output,
2) change some of the casts to prevent warnings on the stricter 2.5.8 gcc
   compiler, and 
3) Include the ieee library in the Makefile as an option, for those compilers
   which might have the problem with the broken strtod (floatconv.c)
   linux library call.  It looks as if Sun may have the same problem?
4) remove the 'Not implemented: LB' error message. It looks as if hpgl2ps
   does implement LB, but I can't get ahold of the previous enhancer to
   check this.
5) enhance the Makefile a bit, including renaming the man pages from
   *.man to *.1 for easier/clearer installation, adding man installation
   and uninstall, and hinging hpgl2ps from libroland.a, as well as making
   testfiles.
6) add a '-v' flag for version number.  There are so many versions of this
   package floating around that major/minor version numbers should help
   someone who is doing an archie/ftp/WWW search to figure out which is the
   latest.
7) Do general cleanup (insert #include's, extern's, reformat with function
   declarations and new arguments, fix a labelling bug, etc.) so that
   the code will compile with no warnings, even with '-Wall' compiler
   flag on gcc, and so that the code is strictly ansi compatible.
   Basically, I could not get hpgl2ps to reliably produce the same
   printout on one machine as the other (Linux and Ultrix).  It does
   now (at least for me).  Also, it doesn't print out spurious warnings 
   about things which haven't been implemented yet, which have.
8) I also removed the SYSV definition.  That definition was around only
   for SYSV people who needed to have rint() (normally from math.h)
   defined for them.  But theoretically, everyone should use the same
   rint, AND since (as of this date, anyway) I can find no POSIX
   definition for rint, AND our use here is pretty simple, AND I was
   getting error messages about implicit declarations, AND our machine
   returns a double, (instead of just an int, as expected here), AND it
   has this wierd rule about returning an even number if
   |rint(x)-x|=1/2, I just decided to rename this one 'local_rint' and
   that way we all have the same thing. 
9) Moved all the *.c hp modules (arcps.c plotdot.c, etc.) into one module
   (hplib.c) for easier porting (primarily makefile problems with Borland).

Also, the labelling is still not yet completely stable/reliable.  This is
why I put in the -w and -h command-line options, as well as -f option,
so that the user can 'tweek' their output, as desired.

Finally, thanks *very* much to Dan Saunders at the University of Idaho
for helping me after days of frustration by patiently explaining the
broken float conversion call. It's nice to know there are people
around who a)know what they're doing, and b)don't mind talking to
people who don't. :)

=====
Jeff Stern <jstern@eclectic.ss.uci.edu>
95/4/19
